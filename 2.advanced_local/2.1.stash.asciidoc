Next we introduce a concept that you may end up using a lot!

Often when you are working you want to return to a pristine state, but not lose
the work you have done so far.

Traditionally with other source control tools we've copied files away

However, git has a concept of the stash to store all local changes.

Basic example:

----
mkdir tmpgit
cd tmpgit
git init
echo 'Some content' > file1
git add file1
git commit -am initial
cat > file1 << END
Some content
Some changes I'm not sure about...
END
----

You can get very sophisticated with the cache, but 99% of the time I use it like this:

git stash

[do my other work]

git stash pop

Let's imagine I'm in the middle of some work, and Alice lets me know that 
there's an important update to the code I need to pull from BitBucket.

----
git diff
# diff --git a/file1 b/file1
# index 0ee3895..5554e0f 100644
# --- a/file1
# +++ b/file1
# @@ -1 +1,2 @@
#  Some content
# +Some changes I'm not sure about...
git stash
# Saved working directory and index state WIP on master: 34509a0 initial
# HEAD is now at 34509a0 initial
git status
# On branch master
# nothing to commit, working directory clean
git log --graph --all --decorate
# *   commit 6a2fda32eaf55fedf90c3aa237a528cf7cf50a95 (refs/stash)
# |\  Merge: 34509a0 9ff137c
# | | Author: Ian Miell <ian.miell@gmail.com>
# | | Date:   Tue Jun 28 12:02:45 2016 +0100
# | | 
# | |     WIP on master: 34509a0 initial
# | |   
# | * commit 9ff137cd51373afe6db37cbac4f1011b0db78ace
# |/  Author: Ian Miell <ian.miell@gmail.com>
# |   Date:   Tue Jun 28 12:02:45 2016 +0100
# |   
# |       index on master: 34509a0 initial
# |  
# * commit 34509a0afaf3eb9b7ff31dee3ab804903c8d36b0 (HEAD, master)
#   Author: Ian Miell <ian.miell@gmail.com>
#   Date:   Tue Jun 28 12:01:49 2016 +0100
#   
#       initial
----

As you can see, it's committed the state of the index (9ff...) and then
committed the local change to the refs/stash branch, and merged them as a child
of the HEAD.

Don't worry too much about the details: it's basically stored
all the changes we've made but not _committed_ ready to be re-applied.

'stash' is a special branch
which is kept local to our repository. The message 'WIP on master' is added
automatically for us.

The master branch is still where it was and the HEAD pointer is pointed at it
(that is where our repo now is).

I can now do my other work (in this case pulling the latest changes) without
concern for whether it conflicts with those changes. 

----
git stash list
# stash@{0}: WIP on master: 34509a0 initial
----

Once done, I can reapply those changes by running:

----
git stash pop
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
# 
# 	modified:   file1
# 
# no changes added to commit (use "git add" and/or "git commit -a")
# Dropped refs/stash@{0} (279ee87c68798caaf2ea3d45fcfa0ac42df6ba4b)
----

which restores me to where I was.

There are more sophisticated ways to deal with stash, but these are not covered
here.



What we learned
---------------

- What the stash is
- How it works
- How to re-apply changes

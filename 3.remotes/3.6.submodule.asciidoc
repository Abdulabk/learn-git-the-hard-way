Git Submodules
--------------

Submodules are a useful concept, and often seen in real projects.

Sometimes you want to 'include' one repository in another, but not simply copy
it over. Submodules allow you to manage the separate codebase with your
repository without changing the other repository.

Let's look at a concrete example.

Let's say Alice maintains a library:

----
rm -rf alicelib && mkdir alicelib && cd alicelib
git init
echo 'A' > file1
git add file1
git commit -am 'A'
git checkout -b experimental      # Branch to experimental
echo 'C - EXPERIMENTAL' >> file1
git commit -am EXPERIMENTAL
git checkout master
echo 'B' >> file1
git commit -am 'B'
----

Alice's library's history looks like this:

A
|\
| C (experimental)
|
B (master)


Now Bob wants to use Alice's library, but specifically wants to use what's on
the experimental branch.

One option is to copy the code over directly, but that seems to be against the
spirit of git.

If an improvement is made on the experimental branch, or Bob wants to move later
to follow what's on the master branch, then he must copy over the code he wants.
For one file it might be manageable, but for a more realistic and large project,
managing this will be completely impractical.

Another option is to check out the code in another folder and link to it in
some predictable way in the code (eg 'source ../alice_experimental). Again,
this causes management problems, as the user checking out the source must
remember to keep code outside this git repository in a certain place for it
all to work.

Git submodules solve these management issues, with a little overhead.

They use git commands to track copies of other repositories within your
repository. The tracking is under your control (so you decide when it gets
'updated'), and the tracking is done within a file that is stored with your git
repository.

WARNING: git submodules can be confusing if you don't follow a few basic
patterns or understand how they work, so it's worth paying attention to this.

Let's make this clearer with a walkthrough.

We are going to assume you have the 'alicelib' repository created as above.

Now create Bob's repository:

----
rm -rf bob_repo && mkdir bob_repo && cd bob_repo
git init
echo 'source alicelib' > file1
git add file1
git commit -am 'sourcing alicelib'
echo 'do something with alicelib experimental' >> file1
git commit -am 'using alicelib experimental'
cat file1
# source alicelib
# do something with alicelib
----

Now we have alice's repo referenced in bob_repo's code, but bob_repo has no link
to alice_repo's code.

The first step to including alicelib in bob_repo is to initialise submodules:

----
git submodule init
----

Once a git submodule init has been performed, you can 'add' the submodule you
want:

----
git submodule add ../alicelib
# Cloning into 'alicelib'...
# done.
----

A new file has been created (.gitmodules), and the folder alicelib has been
created:

----
ls -a
# .		..		.git		.gitmodules	alicelib	file1
----

alicelib has been clone just as any other git repository would be anywhere
else:

----
ls -a alicelib/
.	..	.git	file1
----

but the .gitmodules file tracks where the submodule comes from:

----
cat .gitmodules 
# [submodule "alicelib"]
# 	path = alicelib
# 	url = ../alicelib
----

If you get confused, git provides a useful 'status' command for gitmodules:

----
git submodule status
# ff75b7fc52c3a7d52d89a47fd27d7d22ed280b6f alicelib (heads/master)
----

Now, you may have some questions at this point, such as:

- What happens if alice's branch changes? Does my code automatically update?
- How do you get to the experimental branch?
- What if I make a change to alicelib within my repository submodule checkout?
Can I push those to alice's? Can I keep those private to my repository
- What if there are conflicts between these repositories?

... and so on. I certainly had these questions when I came to git submodules,
and with some trial and error it took me some time to understand what was going
on, so I really recommend playing with these simple examples to get the 
relationships clear in your mind.

TODO
